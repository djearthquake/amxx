#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <fun>
#define MAX_NAME_LENGTH 32
new g_cvar_bsod_iDelay, g_maxplayers, bool:bXploitCheck[MAX_PLAYERS + 1]
#define DELAY ewrite_short(get_pcvar_num(g_cvar_bsod_iDelay)*4096) //Remember 4096 is ~1-sec per 'spec unit'

#define FLAGS       ewrite_short(0x0001)

#define FADE_IN     ewrite_short(1<<0)
#define FADE_OUT    ewrite_short(1<<1)
#define FADE_HOLD   ewrite_short(1<<2)

#define ALPHA ewrite_byte(255)


//Screenfade color.

#define BLK ewrite_byte(0);ewrite_byte(0);ewrite_byte(0)

#define BLU ewrite_byte(0);ewrite_byte(0);ewrite_byte(random_num(200,255))

#define GRN ewrite_byte(0);ewrite_byte(random_num(200,255));ewrite_byte(0)

#define PNK ewrite_byte(255);ewrite_byte(random_num(170,200));ewrite_byte(203)

#define PUR ewrite_byte(118);ewrite_byte(random_num(25,75));ewrite_byte(137)

#define IS_THERE (~(1<<IN_SCORE))

#define charsmin -1

static g_fade, g_shake

public plugin_precache()
{
    static mname[MAX_NAME_LENGTH];
    get_mapname(mname, charsmax(mname) );
    if (containi(mname,"op4c") != -1)
        freeze();
}

public freeze()
{
    pause( "a" );
    return;
}

public plugin_init()
{
    register_plugin("skin_hack_sensor","2.0","SPiNX")
    g_cvar_bsod_iDelay = register_cvar("hacksense_fade_time", "10");
    g_fade = get_user_msgid("ScreenFade")
    g_shake = get_user_msgid("ScreenShake")
    g_maxplayers = get_maxplayers()
}


public client_command(id)
{
    if(is_user_connected(id))
    {
        static szArgCmd[MAX_RESOURCE_PATH_LENGTH + MAX_RESOURCE_PATH_LENGTH]
        read_argv(0, szArgCmd, charsmax(szArgCmd));

        if (equal(szArgCmd,"model") != charsmin && !bXploitCheck[id])
        {
            //client_infochanged(id)
            @info_check(id)
            bXploitCheck[id] = true
            return PLUGIN_HANDLED
        }
    }
    return PLUGIN_CONTINUE;
}

//public client_infochanged(id)
@info_check(id)
{
    if(is_user_connected(id))
    {//if doing it on the fly while running, shooting, etc.
        if(!is_user_bot(id))
        if(is_user_alive(id)/* && (pev(id, pev_button) & IS_THERE)*/)
        if ( get_user_time(id) > get_pcvar_num(g_cvar_bsod_iDelay) )
        {
            log_amx("suspect|%n", id);

            for (new admin=1; admin<=g_maxplayers; admin++)

            if (is_user_connected(admin) && is_user_admin(admin))
            client_print(admin, print_center, "%n info change detected", id);

            @fadenshake(id);
            @hp_damage_effects(id);
            bXploitCheck[id] = false

        }

    }
}

@fadenshake(id)
if(is_user_connected(id))
{
    emessage_begin(MSG_ONE_UNRELIABLE,g_fade,{0,0,0},id)
    DELAY;DELAY;FADE_HOLD;PUR;ALPHA; //This is where one can change BLU to GRN.
    emessage_end();
    static Float:fDelay;fDelay = float(get_pcvar_num(g_cvar_bsod_iDelay)/2)
    set_task(fDelay,"@fadeout", id)
}

@fadeout(id)
if(is_user_connected(id))
{
    emessage_begin(MSG_ONE_UNRELIABLE,g_fade,{0,0,0},id)
    DELAY;DELAY;FADE_OUT;BLK;ALPHA; //This is where one can change BLU to GRN.
    emessage_end();

    static iDelay;iDelay = get_pcvar_num(g_cvar_bsod_iDelay)
    emessage_begin(MSG_ONE,g_shake,{0,0,0},id)
    ewrite_short(25000) //amp
    ewrite_short(iDelay* 4096) //dur //4096 is~1sec
    ewrite_short(30000) //freq
    emessage_end()
}

@hp_damage_effects(id)
{
    if(is_user_alive(id))
    {
        static GET_HP; GET_HP = get_user_health(id);
        set_user_health(id, GET_HP--);
    }
}
